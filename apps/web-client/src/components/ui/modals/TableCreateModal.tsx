import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import { useAppDispatch } from '../../../store/hooks';
import { useForm } from 'react-hook-form';
import { motion } from 'framer-motion';
import { Coins, Clock, Lock, Settings, Play } from 'lucide-react';
import { RootState } from '../../../store';
import { createTable } from '../../../store/slices/tableSlice';
import { closeModal } from '../../../store/slices/uiSlice';
import { TableConfig } from '@shared/types/game.types';

interface TableCreateFormData {
  name: string;
  gameType: 'texas-holdem' | 'omaha' | 'seven-card-stud';
  maxPlayers: number;
  minPlayers: number;
  smallBlind: number;
  bigBlind: number;
  minBuyIn: number;
  maxBuyIn: number;
  timeLimit: number;
  isPrivate: boolean;
  password?: string;
}

const TableCreateModal: React.FC = () => {
  const dispatch = useAppDispatch();
  const { loading, error } = useSelector((state: RootState) => state.table);
  const { user } = useSelector((state: RootState) => state.auth);
  
  const [step, setStep] = useState(1);
  const totalSteps = 3;

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
  } = useForm<TableCreateFormData>({
    defaultValues: {
      name: '',
      gameType: 'texas-holdem',
      maxPlayers: 9,
      minPlayers: 2,
      smallBlind: 1,
      bigBlind: 2,
      minBuyIn: 40,
      maxBuyIn: 200,
      timeLimit: 30,
      isPrivate: false,
    },
  });

  const watchedValues = watch();

  const handleClose = () => {
    dispatch(closeModal());
  };

  const onSubmit = async (data: TableCreateFormData) => {
    const tableConfig: TableConfig = {
      id: '', // Will be generated by backend
      name: data.name || `${user?.username}'s Table`,
      maxPlayers: data.maxPlayers,
      minPlayers: data.minPlayers,
      blinds: {
        small: data.smallBlind,
        big: data.bigBlind,
      },
      buyIn: {
        min: data.minBuyIn,
        max: data.maxBuyIn,
      },
      gameType: data.gameType,
      isPrivate: data.isPrivate,
      password: data.password,
      timeLimit: data.timeLimit,
    };

    try {
      await dispatch(createTable(tableConfig));
      handleClose();
    } catch (error) {
      console.error('Failed to create table:', error);
    }
  };

  const handleBlindPreset = (preset: { small: number; big: number }) => {
    setValue('smallBlind', preset.small);
    setValue('bigBlind', preset.big);
    setValue('minBuyIn', preset.big * 20);
    setValue('maxBuyIn', preset.big * 100);
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
          <Settings className="w-5 h-5 mr-2 text-poker-green-400" />
          Basic Settings
        </h3>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Table Name (Optional)
        </label>
        <input
          {...register('name')}
          type="text"
          className="poker-input w-full"
          placeholder={`${user?.username}'s Table`}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Game Type
        </label>
        <select
          {...register('gameType', { required: 'Game type is required' })}
          className="poker-input w-full"
        >
          <option value="texas-holdem">Texas Hold'em</option>
          <option value="omaha">Omaha</option>
          <option value="seven-card-stud">Seven Card Stud</option>
        </select>
        {errors.gameType && (
          <p className="mt-1 text-sm text-poker-red-500">{errors.gameType.message}</p>
        )}
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Max Players
          </label>
          <select
            {...register('maxPlayers', { 
              required: 'Max players is required',
              min: { value: 2, message: 'Minimum 2 players' },
              max: { value: 10, message: 'Maximum 10 players' }
            })}
            className="poker-input w-full"
          >
            {Array.from({ length: 9 }, (_, i) => i + 2).map(num => (
              <option key={num} value={num}>{num} players</option>
            ))}
          </select>
          {errors.maxPlayers && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.maxPlayers.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Min Players
          </label>
          <select
            {...register('minPlayers', { 
              required: 'Min players is required',
              min: { value: 2, message: 'Minimum 2 players' }
            })}
            className="poker-input w-full"
          >
            <option value={2}>2 players</option>
            <option value={3}>3 players</option>
            <option value={4}>4 players</option>
          </select>
          {errors.minPlayers && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.minPlayers.message}</p>
          )}
        </div>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
          <Coins className="w-5 h-5 mr-2 text-poker-gold-400" />
          Blinds & Buy-ins
        </h3>
      </div>

      {/* Blind Presets */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Quick Presets
        </label>
        <div className="grid grid-cols-2 gap-2">
          {[
            { label: 'Micro Stakes', small: 1, big: 2 },
            { label: 'Low Stakes', small: 5, big: 10 },
            { label: 'Mid Stakes', small: 25, big: 50 },
            { label: 'High Stakes', small: 100, big: 200 },
          ].map((preset) => (
            <button
              key={preset.label}
              type="button"
              onClick={() => handleBlindPreset(preset)}
              className={`p-3 rounded-lg border transition-colors ${
                watchedValues.smallBlind === preset.small && watchedValues.bigBlind === preset.big
                  ? 'border-poker-green-500 bg-poker-green-500/10 text-poker-green-400'
                  : 'border-gray-600 hover:border-gray-500 text-gray-300'
              }`}
            >
              <div className="text-sm font-medium">{preset.label}</div>
              <div className="text-xs">{preset.small}/{preset.big}</div>
            </button>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Small Blind
          </label>
          <input
            {...register('smallBlind', { 
              required: 'Small blind is required',
              min: { value: 1, message: 'Minimum 1' }
            })}
            type="number"
            min="1"
            className="poker-input w-full"
          />
          {errors.smallBlind && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.smallBlind.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Big Blind
          </label>
          <input
            {...register('bigBlind', { 
              required: 'Big blind is required',
              min: { value: 2, message: 'Minimum 2' }
            })}
            type="number"
            min="2"
            className="poker-input w-full"
          />
          {errors.bigBlind && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.bigBlind.message}</p>
          )}
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Min Buy-in
          </label>
          <input
            {...register('minBuyIn', { 
              required: 'Min buy-in is required',
              min: { value: 10, message: 'Minimum 10' }
            })}
            type="number"
            min="10"
            className="poker-input w-full"
          />
          <p className="text-xs text-gray-400 mt-1">
            Recommended: {watchedValues.bigBlind * 20} ({watchedValues.bigBlind}×20)
          </p>
          {errors.minBuyIn && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.minBuyIn.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Max Buy-in
          </label>
          <input
            {...register('maxBuyIn', { 
              required: 'Max buy-in is required',
              min: { value: 20, message: 'Minimum 20' }
            })}
            type="number"
            min="20"
            className="poker-input w-full"
          />
          <p className="text-xs text-gray-400 mt-1">
            Recommended: {watchedValues.bigBlind * 100} ({watchedValues.bigBlind}×100)
          </p>
          {errors.maxBuyIn && (
            <p className="mt-1 text-sm text-poker-red-500">{errors.maxBuyIn.message}</p>
          )}
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
          <Clock className="w-5 h-5 mr-2 text-blue-400" />
          Additional Settings
        </h3>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Action Time Limit (seconds)
        </label>
        <select
          {...register('timeLimit', { required: 'Time limit is required' })}
          className="poker-input w-full"
        >
          <option value={15}>15 seconds (Fast)</option>
          <option value={30}>30 seconds (Normal)</option>
          <option value={45}>45 seconds (Relaxed)</option>
          <option value={60}>60 seconds (Slow)</option>
        </select>
        {errors.timeLimit && (
          <p className="mt-1 text-sm text-poker-red-500">{errors.timeLimit.message}</p>
        )}
      </div>

      <div className="space-y-4">
        <label className="flex items-center">
          <input
            {...register('isPrivate')}
            type="checkbox"
            className="h-4 w-4 text-poker-green-600 focus:ring-poker-green-500 border-gray-600 bg-poker-dark-700 rounded"
          />
          <span className="ml-2 text-sm text-gray-300">Make table private</span>
        </label>

        {watchedValues.isPrivate && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="ml-6"
          >
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Password
            </label>
            <input
              {...register('password', { 
                required: watchedValues.isPrivate ? 'Password is required for private tables' : false
              })}
              type="password"
              className="poker-input w-full"
              placeholder="Enter table password"
            />
            {errors.password && (
              <p className="mt-1 text-sm text-poker-red-500">{errors.password.message}</p>
            )}
          </motion.div>
        )}
      </div>

      {/* Summary */}
      <div className="bg-poker-dark-700 rounded-lg p-4">
        <h4 className="text-sm font-medium text-white mb-3">Table Summary</h4>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-gray-400">Game:</span>
            <span className="text-white">{watchedValues.gameType}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Players:</span>
            <span className="text-white">{watchedValues.minPlayers}-{watchedValues.maxPlayers}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Blinds:</span>
            <span className="text-white">{watchedValues.smallBlind}/{watchedValues.bigBlind}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Buy-in:</span>
            <span className="text-white">{watchedValues.minBuyIn}-{watchedValues.maxBuyIn}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Time Limit:</span>
            <span className="text-white">{watchedValues.timeLimit}s</span>
          </div>
          {watchedValues.isPrivate && (
            <div className="flex justify-between">
              <span className="text-gray-400">Privacy:</span>
              <span className="text-yellow-400 flex items-center">
                <Lock className="w-3 h-3 mr-1" />
                Private
              </span>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-md w-full">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-white mb-2">Create New Table</h2>
        <p className="text-gray-400">Set up your perfect poker table</p>
        
        {/* Progress Bar */}
        <div className="mt-4">
          <div className="flex items-center justify-between text-xs text-gray-400 mb-2">
            <span>Step {step} of {totalSteps}</span>
            <span>{Math.round((step / totalSteps) * 100)}%</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2">
            <div 
              className="bg-poker-green-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(step / totalSteps) * 100}%` }}
            />
          </div>
        </div>
      </div>

      {error && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-poker-red-500 bg-opacity-10 border border-poker-red-500 rounded-lg p-3 mb-6"
        >
          <p className="text-poker-red-500 text-sm">{error}</p>
        </motion.div>
      )}

      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="min-h-[400px]">
          {step === 1 && renderStep1()}
          {step === 2 && renderStep2()}
          {step === 3 && renderStep3()}
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between mt-8">
          <div>
            {step > 1 && (
              <button
                type="button"
                onClick={() => setStep(step - 1)}
                className="poker-button poker-button-secondary"
              >
                Previous
              </button>
            )}
          </div>

          <div className="flex space-x-3">
            <button
              type="button"
              onClick={handleClose}
              className="poker-button poker-button-secondary"
            >
              Cancel
            </button>
            
            {step < totalSteps ? (
              <button
                type="button"
                onClick={() => setStep(step + 1)}
                className="poker-button poker-button-primary"
              >
                Next
              </button>
            ) : (
              <button
                type="submit"
                disabled={loading}
                className="poker-button poker-button-primary flex items-center"
              >
                {loading ? (
                  <div className="loading-spinner w-4 h-4 mr-2" />
                ) : (
                  <Play className="w-4 h-4 mr-2" />
                )}
                Create Table
              </button>
            )}
          </div>
        </div>
      </form>
    </div>
  );
};

export default TableCreateModal; 